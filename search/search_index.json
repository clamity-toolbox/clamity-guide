{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What's Clamity?","text":"<p>...because tools separate us from the rest of the animals.</p> <p>You guessed it, another opionated toolbox. Clamity was born from my personal approach to providing structure, automation and repeatability for software development through CI/CD pipelines and infrastructure. It has something to offer all parts of the SDLC and Systems Operations. Try it. Maybe you'll like it.</p> <p>Its primary tool is the <code>clamity CLI</code> which blends a custom user interface interface with documentation in context so my tiny pea-brain doesn't have to memorize the zillions of ways things work and glue together.</p> <p>A browser front-ended service is in the ~~planning~~ dreaming stage.</p>"},{"location":"#the-clamity-cli","title":"The Clamity CLI","text":""},{"location":"#considerations","title":"Considerations","text":"<ul> <li> <p>The toolbox favors unix-like operating systems, notably linux and OSX.</p> </li> <li> <p>The Clamity CLI supports zsh and bash. Read this brief about working   in a shell environment.</p> </li> <li> <p>Make sure you have a Clamity supported package manager installed on your   computer and in your search path (<code>PATH</code>). Clamity builds on lots of 3rd party   software and services and will prompt you to install additional software along   the way; some via your chosen package manager, others via vendor provided   native installation.</p> </li> <li> <p>Supported package managers for macos:</p> <ul> <li>macports [<code>port version</code>]</li> <li>Homebrew [<code>brew --version</code>]</li> </ul> </li> <li> <p>Supported linux distributions (including their respective package managers):</p> <ul> <li>Fedora/CentOS/RedHat [rpm/yum]</li> <li>Ubuntu/Debian [dpkg/apt]</li> </ul> </li> <li> <p>Much of clamity's functionality is written in python and you're bound to come   across it sooner or later. It will create its own python virtual environment   JIT but you'll need to have python3 version 3.10 or greater in your   search path. To verify this, run the command <code>python3 --version</code>.</p> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<ol> <li> <p>Clone the repo. It's recommended to use the <code>ssh</code> protocol as many of the    <code>clamity</code> features rely upon it. To do so, you'll need to add your ssh public    key to your <code>github.com</code> account settings <code>Github.com &gt; User Menu &gt; Settings &gt; SSH and GPG keys</code>.    <pre><code>cd /my/src\ngit clone git@github.com:clamity-toolbox/clamity\n</code></pre>    Cloning via <code>https</code> is fine but eventually you'll want to create one or more    ssh key pair(s) for yourself; <code>clamity</code> can help with that too.</p> </li> <li> <p>The <code>clamity</code> command is implemented as a shell function so it needs to be    loaded into your shell. It will NOT be inherited when launching sub-shells    unless you specifically modify your shell's run-commands file (<code>~/.zshrc</code>,    <code>~/.bashrc</code>) to do that. Use the <code>--quiet</code> option if you don't want any    output when loading it.    <pre><code>source /my/src/clamity/loader.sh\n</code></pre></p> </li> <li> <p>Consider adding an alias to your shell's run-commands file (<code>~/.bashrc</code> or    <code>~/.zshrc</code>) to make it available in all shells you spawn. For example:    <pre><code>echo \"alias load-clamity='source /my/src/clamity/loader.sh --quiet'\" &gt;&gt; ~/.zshrc'\n</code></pre>    Now for all new shells (not your current one), you'll be able to type    <code>load-clamity</code> on the command line to load it.</p> </li> <li> <p>To get started, type <code>clamity</code> for a brief usage, <code>clamity help</code> for more    detail or <code>clamity &lt;command&gt; help</code> for command-specific info.    <pre><code>% clamity\nUSAGE\n\n clamity help\n clamity { command [sub-command] [options] [[--] positional args]\n\nCLAMITY ACTIONS\n\n aws - provides exteneded capabilities to the aws command line utility\n config - manage clamity configuration settings\n context - manage contexts\n env - mutate the shell's environment in useful ways\n help - clamity man page\n os - OS configuration management (includes package manager)\n py - use the clamity python environment (clam-py)\n secrets - secrets store operations\n selfupdate - update clamity and OS packages\n tfm - provides exteneded capabilities to terraform\n\n%\n</code></pre></p> </li> </ol>"},{"location":"#include-clamity-commands-in-your-scripts","title":"Include clamity commands in your scripts","text":"<p>If you want to use <code>clamity</code> commands in your scripts or programs, use the <code>$CLAMITY_ROOT/bin/run-clamity</code> command. It has the same usage as the <code>clamity</code> shell function. Note that any sub-commaands which mutate the shell's environment won't survive the command's execution.</p>"},{"location":"#other-things","title":"Other Things","text":""},{"location":"#opinions-about-documentation","title":"Opinions about Documentation","text":"<p>I consider relevant, well-scoped, easily retrieved documentation a primary characteristic of any operational environment. Some of the tenets guiding my choices follow.</p> <ul> <li> <p>There should be a single source of truth for things. Systems should support   this philospohy by referring (linking) to them rather than copying or   restating them.</p> </li> <li> <p>Favor context sensitive documentation intermixed with the command interpreter   for choosing the source of truth. If I'm using the <code>clamity secrets</code> command,   then <code>clamity secrets help</code> should have everything I need to complete my   mission.</p> </li> <li> <p>README files living along side code in the repo should be prioritized high   when choosing a location for a document. In these cases, it should be   obvious the document is associated with the particular repo (think user   guide for an application living with the application code). We live in a   repo-centric world.</p> </li> <li> <p>Less is more. Assume most people don't like to read (bet ya few make it   through this page!). Keep it brief and make it as context sensitive as   possible (think README files throughout the directory tree of a repo).</p> </li> </ul>"},{"location":"#contributions","title":"Contributions","text":"<p>Contributions are welcome with the expectation that you're consistent with the practices and structure of the toolkit. Create your fork and submit PR's as desired. And thanks for helping out!</p>"},{"location":"Man%20Pages/","title":"Clamity Commands","text":"<p>The man page for each sub-command is the best starting place to learn about that command. They're all presented in this section.</p> <pre><code>% clamity\nUSAGE\n\n    clamity help\n    clamity { command [sub-command] [options] [[--] positional args]\n\nCLAMITY COMMANDS\n\n    aws - provides exteneded capabilities to the aws command line utility\n    config - manage clamity configuration settings\n    context - manage contexts\n    env - mutate the shell's environment in useful ways\n    help - clamity man page\n    os - OS configuration management (includes package manager)\n    py - use the clamity python environment (clam-py)\n    secrets - secrets store operations\n    selfupdate - update clamity and OS packages\n    tfm - provides exteneded capabilities to terraform\n</code></pre>"},{"location":"Man%20Pages/aws/","title":"Aws","text":"<pre><code>% clamity aws help\nUSAGE\n\n    clamity aws { whoami | assume-role | profile [&lt;profile&gt;] | login [sso-session] } [options]\n    clamity aws { aws-cmd-and-args }\n\nABSTRACT\n\n    This wraps the 'aws' cli to provide extended capabilities.\n\nAWS COMMANDS\n\n    login - login to an aws sso session\n    profile - alias for 'clamity env aws-profile'\n    show - list resources\n    whoami - aws sts get-caller-identity\n\nCOMMON OPTIONS\n\n    -d, --debug\n        Debug mode provides additional, lower-level output (CLAMITY_debug=1). Debug\n        messages are sent to stderr.\n\n    -n, --dryrun\n        Allows for execution of a script withot causing an underlying change to whatever\n        data the script affects. It is up to each script to determine what that means.\n        Some scripts do not support dryrun and will terminate immediately if it's enabled\n        (CLAMITY_dryrun=1).\n\n    -of, --output-format { json | text | csv }\n        Specifies format of output where applicable (CLAMITY_output_format). Defaults\n        to json.\n\n    -or, --output-redirection { none | log }\n        Sets up output redirection. 'none' leaves stdout and stderr untouched (this is\n        the default setting). 'log' captures both stdout and stderr to one log file and\n        sets CLAMITY_logfile to the full path and name of the logfile, using that value\n        if already set (CLAMITY_output_redirection=\"{none | log}\").\n\n    -q, --quiet\n        Suppress (or minimize) all reporting except warnings and errors (CLAMITY_quiet=1).\n\n    -v, --verbose\n        Enable extra reporting (CLAMITY_verbose=1). Includes printing the commands being\n        run under the hood to stdout.\n\n    -y, --yes\n        Disables interactive mode in which commands that prompt for confirmation before\n        doing things will automatically get answered with 'yes' (CLAMITY_yes=1).\n</code></pre>"},{"location":"Man%20Pages/clamity/","title":"Clamity","text":"<pre><code>% clamity  help\nUSAGE\n\n    clamity help\n    clamity { command [sub-command] [options] [[--] positional args]\n\nABSTRACT\n\n    clamity is a collection of tools for software development, CI/CD\n    pipeline automation and operations. The CLI provides an abstracted\n    interface with contextual help to ease the cognative load that comes\n    with the plethora of platform commands.\n\n    The clamity CLI entry point is implemented as a shell function so it\n    can manipulate the current shell environment. Use 'run-clamity' if\n    including its commands in scripts. Default settings are stored in a\n    file and will apply globally to all your shells running clamity\n    whereas non-default (local) settings apply solely to the one shell.\n\n    Local settings and data are stored in $CLAMITY_HOME (defaults to\n    $HOME/.clamity).\n\n    The clamity user guide can be found at https://user-guide.clamity.com/\n\nCLAMITY COMMANDS\n\n    aws - provides exteneded capabilities to the aws command line utility\n    config - manage clamity configuration settings\n    context - manage contexts\n    env - mutate the shell's environment in useful ways\n    help - clamity man page\n    os - OS configuration management (includes package manager)\n    py - use the clamity python environment (clam-py)\n    secrets - secrets store operations\n    selfupdate - update clamity and OS packages\n    tfm - provides exteneded capabilities to terraform\n\nCOMMON OPTIONS\n\n    -d, --debug\n        Debug mode provides additional, lower-level output (CLAMITY_debug=1). Debug\n        messages are sent to stderr.\n\n    -n, --dryrun\n        Allows for execution of a script withot causing an underlying change to whatever\n        data the script affects. It is up to each script to determine what that means.\n        Some scripts do not support dryrun and will terminate immediately if it's enabled\n        (CLAMITY_dryrun=1).\n\n    -of, --output-format { json | text | csv }\n        Specifies format of output where applicable (CLAMITY_output_format). Defaults\n        to json.\n\n    -or, --output-redirection { none | log }\n        Sets up output redirection. 'none' leaves stdout and stderr untouched (this is\n        the default setting). 'log' captures both stdout and stderr to one log file and\n        sets CLAMITY_logfile to the full path and name of the logfile, using that value\n        if already set (CLAMITY_output_redirection=\"{none | log}\").\n\n    -q, --quiet\n        Suppress (or minimize) all reporting except warnings and errors (CLAMITY_quiet=1).\n\n    -v, --verbose\n        Enable extra reporting (CLAMITY_verbose=1). Includes printing the commands being\n        run under the hood to stdout.\n\n    -y, --yes\n        Disables interactive mode in which commands that prompt for confirmation before\n        doing things will automatically get answered with 'yes' (CLAMITY_yes=1).\n\nBOOLEAN EVALUATION\n\n    Bpolean truthiness defines 'false' as an empty string or a case insensitive\n    match to anything matching to 'n|no|0|null|none|undefined|undef|f|false'.\n    The 'lib/_.sh:_is_false()' shell function is the source of truth for\n    truthiness.\n\nSUPPORTED SHELLS\n\n    bash, zsh\n\nENVIRONMENT VARIABLES\n\n    These are set when clamity is loaded. You can pre-define CLAMITY_HOME\n    if you don't want it to be '$HOME/.clamity'.\n\n    CLAMITY_ROOT (read-only)\n        clamity software directory. This is set when clamity is loaded.\n\n    CLAMITY_HOME\n        clamity home dir holds logs, customizations, python virtual env,\n        and much more. It is created when clamity is loaded for the first\n        time. Unless this variable is set, it will be ~/.clamity.\n\n    CLAMITY_&lt;lower-case-option-name&gt;\n        Clamity options are managed using 'clamity config'. Options are\n        stored as environment variables prefixed with 'CLAMITY_'.\n\nEXAMPLES\n\n    Run 'clamity' or 'clamity help' to get started.\n\n    Update clamity software.\n\n        clamity selfupdate\n\n    Check out the OS environment and configuration.\n\n        clamity os check\n\n    Set a config parameter, in this case CLAMITY_verbose, in the current\n    shell only.\n\n        clamity config set verbose 1\n\n    Same as above but set it as a default. It will also have affect for\n    all other shells when you run clamity commands. Default settings are\n    stored in $CLAMITY_HOME/defaults.env.\n\n        clamity config set default verbose 1\n</code></pre>"},{"location":"Man%20Pages/config/","title":"Config","text":"<pre><code>% clamity config help\nUSAGE\n\n    clamity config list\n    clamity config { set | unset } [default] {config-opt} [value]\n    clamity config show [defaults]\n\nABSTRACT\n\n    config manages your clamity settings. When you set an option, you\n    define it in your current shell only. When you set it as a default,\n    you set it in your current shell _and_ in a local file that will be\n    seen by all active and future clamity terminal shells.\n\n    Unsetting a variable affects both the current shell and, if default\n    is specified, removes the setting from the local file. Note that\n    unsetting a variable will _not_ affect other active shells.\n\nCONFIG COMMANDS\n\n    list - list config variables\n    set - set a config variable\n    show - report env and default settings\n    unset - unset config variable\n\nDESCRIPTIONS\n\n    list\n        list common config options.\n\n    set ['default'] &lt;config-opt&gt; &lt;value&gt;\n        Sets a configuration option &lt;config-opt&gt;. For a list of _some_\n        config options, run 'clamity config list'. Options aren't managed\n        centrally. The 'default' keyword stores the setting and applies to\n        all current shells using clamity. Otherwise, the setting is only\n        in the environment of the current terminal shell.\n\n    show ['defaults']\n        Print the options. 'default' shows the options from the persistent\n        settings file. otherwise it lists the options set in the environment.\n\n    unset ['default'] &lt;config-opt&gt;\n        Unsets an option (see set).\n\nCOMMON OPTIONS\n\n    -d, --debug\n        Debug mode provides additional, lower-level output (CLAMITY_debug=1). Debug\n        messages are sent to stderr.\n\n    -n, --dryrun\n        Allows for execution of a script withot causing an underlying change to whatever\n        data the script affects. It is up to each script to determine what that means.\n        Some scripts do not support dryrun and will terminate immediately if it's enabled\n        (CLAMITY_dryrun=1).\n\n    -of, --output-format { json | text | csv }\n        Specifies format of output where applicable (CLAMITY_output_format). Defaults\n        to json.\n\n    -or, --output-redirection { none | log }\n        Sets up output redirection. 'none' leaves stdout and stderr untouched (this is\n        the default setting). 'log' captures both stdout and stderr to one log file and\n        sets CLAMITY_logfile to the full path and name of the logfile, using that value\n        if already set (CLAMITY_output_redirection=\"{none | log}\").\n\n    -q, --quiet\n        Suppress (or minimize) all reporting except warnings and errors (CLAMITY_quiet=1).\n\n    -v, --verbose\n        Enable extra reporting (CLAMITY_verbose=1). Includes printing the commands being\n        run under the hood to stdout.\n\n    -y, --yes\n        Disables interactive mode in which commands that prompt for confirmation before\n        doing things will automatically get answered with 'yes' (CLAMITY_yes=1).\n\nBOOLEAN EVALUATION\n\n    Boolean truthiness defines 'false' as an empty string or a case insensitive\n    match to anything matching to 'n|no|0|null|none|undefined|undef|f|false'.\n    Convention for setting booleans is to set them to a value of 1.\n\n    The 'lib/_.sh:_is_false()' shell function is the source of truth for\n    truthiness.\n\nSUPPORTED SHELLS\n\n    bash, zsh\n\nEXAMPLES\n\n    Set verbose on by default (CLAMITY_verbose)\n        clamity config set default verbose 1\n\n    Set debug for my session only (CLAMITY_debug)\n        clamity config set debug 1\n</code></pre>"},{"location":"Man%20Pages/context/","title":"Context","text":"<pre><code>% clamity context help\nUSAGE\n\n    clamity context { help | show }\n    clamity context data-pack { installed | set [&lt;data-pack&gt;] | clear | install-git &lt;data-pack-url-via-git&gt; | remove &lt;data-pack&gt; | update | fetch [prop] }\n\nABSTRACT\n\n    Many clamity functions operate in a given context. For example, if you're\n    working with AWS resources the AWS SDK access credentials and region will\n    determine the endpoint and role applied to the task at hand. Clamity is\n    aware of some context types and can let you switch between them.\n\n    Known context types:\n    - AWS\n    - Git based data packs\n\nCONTEXT COMMANDS\n\n    data-pack - manage data packs\n    show - report contexts\n\nCOMMON OPTIONS\n\n    -d, --debug\n        Debug mode provides additional, lower-level output (CLAMITY_debug=1). Debug\n        messages are sent to stderr.\n\n    -n, --dryrun\n        Allows for execution of a script withot causing an underlying change to whatever\n        data the script affects. It is up to each script to determine what that means.\n        Some scripts do not support dryrun and will terminate immediately if it's enabled\n        (CLAMITY_dryrun=1).\n\n    -of, --output-format { json | text | csv }\n        Specifies format of output where applicable (CLAMITY_output_format). Defaults\n        to json.\n\n    -or, --output-redirection { none | log }\n        Sets up output redirection. 'none' leaves stdout and stderr untouched (this is\n        the default setting). 'log' captures both stdout and stderr to one log file and\n        sets CLAMITY_logfile to the full path and name of the logfile, using that value\n        if already set (CLAMITY_output_redirection=\"{none | log}\").\n\n    -q, --quiet\n        Suppress (or minimize) all reporting except warnings and errors (CLAMITY_quiet=1).\n\n    -v, --verbose\n        Enable extra reporting (CLAMITY_verbose=1). Includes printing the commands being\n        run under the hood to stdout.\n\n    -y, --yes\n        Disables interactive mode in which commands that prompt for confirmation before\n        doing things will automatically get answered with 'yes' (CLAMITY_yes=1).\n\nEXAMPLES\n\n    Install some data packs.\n        clamity context data-pack install-git git@github.com:teamvortexsoftware/infra-data-dev\n        clamity context data-pack install-git git@github.com:teamvortexsoftware/infra-data-prod\n</code></pre>"},{"location":"Man%20Pages/env/","title":"Env","text":"<pre><code>% clamity env help\nUSAGE\n\n    clamity env activate-python\n    clamity env aws-profile [&lt;profile-to-set&gt;]\n\nABSTRACT\n\n    Mutate the current shell environment.\n\nENV COMMANDS\n\n    activate-python - activate clamity's python virtual environment\n    aws-profile - manage AWS profile settings\n\nCOMMAND OPTIONS\n\n    None\n\nMORE\n\n    activate-python\n        Adds the clamity python virtual environment's bin/ directory to your\n        shell's search path (PATH) making python package commands available.\n        This will also reset your default python3 version to clamity's.\n\nCOMMON OPTIONS\n\n    -d, --debug\n        Debug mode provides additional, lower-level output (CLAMITY_debug=1). Debug\n        messages are sent to stderr.\n\n    -n, --dryrun\n        Allows for execution of a script withot causing an underlying change to whatever\n        data the script affects. It is up to each script to determine what that means.\n        Some scripts do not support dryrun and will terminate immediately if it's enabled\n        (CLAMITY_dryrun=1).\n\n    -of, --output-format { json | text | csv }\n        Specifies format of output where applicable (CLAMITY_output_format). Defaults\n        to json.\n\n    -or, --output-redirection { none | log }\n        Sets up output redirection. 'none' leaves stdout and stderr untouched (this is\n        the default setting). 'log' captures both stdout and stderr to one log file and\n        sets CLAMITY_logfile to the full path and name of the logfile, using that value\n        if already set (CLAMITY_output_redirection=\"{none | log}\").\n\n    -q, --quiet\n        Suppress (or minimize) all reporting except warnings and errors (CLAMITY_quiet=1).\n\n    -v, --verbose\n        Enable extra reporting (CLAMITY_verbose=1). Includes printing the commands being\n        run under the hood to stdout.\n\n    -y, --yes\n        Disables interactive mode in which commands that prompt for confirmation before\n        doing things will automatically get answered with 'yes' (CLAMITY_yes=1).\n</code></pre>"},{"location":"Man%20Pages/os/","title":"Os","text":"<pre><code>% clamity os help\nUSAGE\n\n    clamity os { &lt;sub-command&gt; } [options]\n\nABSTRACT\n\n    The OS command is for configuring and managing your local host's\n    operating system.\n\nOS COMMANDS\n\n    check - probe OS for config &amp; environment info\n    cron - work with cron\n    pkg - abstracted package management\n    pm - power management\n\nCOMMAND OPTIONS\n\n    --opt-a\n        boolean yes or no\n\n    --opt-name &lt;name&gt;\n        the name of the thing you specifed using --opt-name.\n\nCOMMON OPTIONS\n\n    -d, --debug\n        Debug mode provides additional, lower-level output (CLAMITY_debug=1). Debug\n        messages are sent to stderr.\n\n    -n, --dryrun\n        Allows for execution of a script withot causing an underlying change to whatever\n        data the script affects. It is up to each script to determine what that means.\n        Some scripts do not support dryrun and will terminate immediately if it's enabled\n        (CLAMITY_dryrun=1).\n\n    -of, --output-format { json | text | csv }\n        Specifies format of output where applicable (CLAMITY_output_format). Defaults\n        to json.\n\n    -or, --output-redirection { none | log }\n        Sets up output redirection. 'none' leaves stdout and stderr untouched (this is\n        the default setting). 'log' captures both stdout and stderr to one log file and\n        sets CLAMITY_logfile to the full path and name of the logfile, using that value\n        if already set (CLAMITY_output_redirection=\"{none | log}\").\n\n    -q, --quiet\n        Suppress (or minimize) all reporting except warnings and errors (CLAMITY_quiet=1).\n\n    -v, --verbose\n        Enable extra reporting (CLAMITY_verbose=1). Includes printing the commands being\n        run under the hood to stdout.\n\n    -y, --yes\n        Disables interactive mode in which commands that prompt for confirmation before\n        doing things will automatically get answered with 'yes' (CLAMITY_yes=1).\n\nENVIRONMENT VARIABLES\n\n    CLAMITY_os_preferred_pkg_mgr\n        Supported package managers: brew | port | yum | apt\n\nEXAMPLES\n\n    This is one way to it\n        ls /tmp\n</code></pre>"},{"location":"Man%20Pages/py/","title":"Py","text":"<pre><code>% clamity py help\nUSAGE\n\n    clamity py { activate }\n    clamity py &lt;python-command&gt; &lt;args&gt;\n\nABSTRACT\n\n    Work with the clamity python virtual environment &amp; run python scripts.\n\nPY COMMANDS\n\n    activate - activate clamity's python virtual environment\n\nDESCRIPTIONS\n\n    activate\n        Activates a session with the clamity python virtual environment. To\n        exit the session, type 'deactivate'.\n\nCOMMON OPTIONS\n\n    -d, --debug\n        Debug mode provides additional, lower-level output (CLAMITY_debug=1). Debug\n        messages are sent to stderr.\n\n    -n, --dryrun\n        Allows for execution of a script withot causing an underlying change to whatever\n        data the script affects. It is up to each script to determine what that means.\n        Some scripts do not support dryrun and will terminate immediately if it's enabled\n        (CLAMITY_dryrun=1).\n\n    -of, --output-format { json | text | csv }\n        Specifies format of output where applicable (CLAMITY_output_format). Defaults\n        to json.\n\n    -or, --output-redirection { none | log }\n        Sets up output redirection. 'none' leaves stdout and stderr untouched (this is\n        the default setting). 'log' captures both stdout and stderr to one log file and\n        sets CLAMITY_logfile to the full path and name of the logfile, using that value\n        if already set (CLAMITY_output_redirection=\"{none | log}\").\n\n    -q, --quiet\n        Suppress (or minimize) all reporting except warnings and errors (CLAMITY_quiet=1).\n\n    -v, --verbose\n        Enable extra reporting (CLAMITY_verbose=1). Includes printing the commands being\n        run under the hood to stdout.\n\n    -y, --yes\n        Disables interactive mode in which commands that prompt for confirmation before\n        doing things will automatically get answered with 'yes' (CLAMITY_yes=1).\n</code></pre>"},{"location":"Man%20Pages/secrets/","title":"Secrets","text":"<pre><code>% clamity secrets help\n/Users/jj/.clamity/pyvenv/bin/python3 /Users/jj/src/clamity-toolbox/clamity/cmds/secrets.py help\nusage: \n    clamity secrets { list | help }\n    clamity secrets write --name secret/path/and/name --desc \"useful desc\" --value \"supersecret\"\n    clamity secrets write --name secret/path/and/name --desc \"useful desc\" \\\n                          --type &lt;known-type&gt; --value '{\"prop1\": \"val\", \"prop2\": \"val2\", ...}'\n    clamity secrets { read | details | delete } --name secret/path/and/name\n    clamity secrets update --name secret/path/and/name [--desc \"updated desc\"] [[--type &lt;known-type&gt;] --value \"secret-data\"]\n\nManage data in the secrets store (AWS secretsmanager)\n\nsynopsis:\n\n    CLI for managing data in AWS secrets manager. Also provides an integration with a\n    secrets schema to ensure data is stored in standard locations for tying into CI/CD\n    pipelines.\n\npositional arguments:\n  {list,types,delete,update,write,read,details,restore,help}\n                        action to take\n\noptions:\n  -h, --help            show this help message and exit\n  -d, --debug           debug output\n  -v, --verbose         verbose output\n  -q, --quiet           surpress output\n  -n, --dryrun          dryrun - won't mutate\n  -y, --yes             disable interactive prompts in the affirmative\n  -of {json,text,csv}, --output-format {json,text,csv}\n                        json, text (default) or csv\n  --no-truncate         don't truncate column widths\n  --no-header           don't display column headers\n  --aws-region AWS_REGION\n                        AWS region (eg. us-east-1)\n  --desc DESC           useful description of the secret (possibly a URL)\n  --name NAME           secret's path and name (secret store key)\n  --value VALUE         the secret's value\n  --type {ssh_key,rds_mysql}\n                        add secret validation\n\nactions:\n\n    delete   Delete secrets from the secrets store\n    details  Display the AWS API response (in JSON) for secret details\n    help     Full help\n    list     List the secrets\n    read     Return the value of a secret\n    update   Update a secret's description or value\n    write    Add new secrets to the secrets store\n\nstandard storage conventions:\n\n    Secret names follow conventions to integration with IAM policies and CI/CD\n    pipelines (such as terraform). They're categorized accordingly. A search\n    path is typically used in development to accomodate developers who have\n    more restricted write capabilities. The search path defaults to ['devs/', ''].\n    Developers can write to 'certs/devs/...', 'secrets/devs/...', etc... but\n    can read from the larger scope of 'certs/...', 'secrets/...'.\n\n    TLS Certificates:\n        certs/[search-path]&lt;domainName&gt;/{key|crt|ca}\n\n    Secrets for services:\n        services/[search-path]&lt;serviceName&gt;/&lt;app-env&gt;/&lt;secretName&gt;\n\n    SSH Keys for services:\n        services/[search-path]&lt;serviceName&gt;/&lt;app-env&gt;/ssh-keys/&lt;keyName&gt;/{public|private}\n\n    Providers:\n        providers/[search-path]&lt;providerName&gt;/&lt;app-env&gt;/&lt;provider-specific-organization&gt;\n\n    Individual users' secrets:\n        users/&lt;aws-user-id&gt;/&lt;anything&gt;\n\n    Individual users' ssh keys:\n        users/&lt;aws-user-id&gt;/ssh-keys/&lt;keyName&gt;/{public|private}\n\nexamples:\n    Need some examples here.\n</code></pre>"},{"location":"Man%20Pages/selfupdate/","title":"Selfupdate","text":"<pre><code>% clamity selfupdate help\nUSAGE\n\n    clamity selfupdate help\n    clamity selfupdate [-y] [update] [ [--no-pkg-mgr] [--no-backup] [--no-python] | [--me-only] ]\n    clamity selfupdate [-y] cron { installed | available | install &lt;cron-template&gt; | remove &lt;cron-template&gt; }\n\nABSTRACT\n\n    Update the clamity software, package managers and packages and all\n    matter of software under clamity's umbrella.\n\nSELFUPDATE COMMANDS\n\n    update - update clamity software (default action)\n\nCOMMAND OPTIONS\n\n    --no-pkg-mgr --no-backup --no-python\n        Update the clamity installation without performing the specified task(s).\n\n    --me-only\n        Only update the clamity software, do not perform any other tasks.\n\nDESCRIPTION\n\n    update (default action)\n        Runs the self update function. The full monty includes:\n          - backup clamity data and software ($CLAMITY_ROOT and $CLAMITY_HOME)\n          - update clamity software (git pull)\n          - update clamity python virtual environment (clam-py update)\n          - update selected package manager (apt, brew, macports, ...) pkgs\n\n    cron\n        Manage a simple crontab entry to keep clamity updated. 'installled' lists\n        clamity additions currently in your crontab. 'available' lists the\n        templates included with clamity which can be installed.\n\nFILES\n\n    Logfiles created by crontab jobs.\n        $CLAMITY_HOME/logs/*.cron.*\n\nCOMMON OPTIONS\n\n    -d, --debug\n        Debug mode provides additional, lower-level output (CLAMITY_debug=1). Debug\n        messages are sent to stderr.\n\n    -n, --dryrun\n        Allows for execution of a script withot causing an underlying change to whatever\n        data the script affects. It is up to each script to determine what that means.\n        Some scripts do not support dryrun and will terminate immediately if it's enabled\n        (CLAMITY_dryrun=1).\n\n    -of, --output-format { json | text | csv }\n        Specifies format of output where applicable (CLAMITY_output_format). Defaults\n        to json.\n\n    -or, --output-redirection { none | log }\n        Sets up output redirection. 'none' leaves stdout and stderr untouched (this is\n        the default setting). 'log' captures both stdout and stderr to one log file and\n        sets CLAMITY_logfile to the full path and name of the logfile, using that value\n        if already set (CLAMITY_output_redirection=\"{none | log}\").\n\n    -q, --quiet\n        Suppress (or minimize) all reporting except warnings and errors (CLAMITY_quiet=1).\n\n    -v, --verbose\n        Enable extra reporting (CLAMITY_verbose=1). Includes printing the commands being\n        run under the hood to stdout.\n\n    -y, --yes\n        Disables interactive mode in which commands that prompt for confirmation before\n        doing things will automatically get answered with 'yes' (CLAMITY_yes=1).\n\nSUPPORTED SHELLS\n\n    bash, zsh\n\nEXAMPLES\n\n    Update clamity interactively\n        clamity selfupdate\n\n    Update clamity non-interactively without the including the package manager\n        clamity selfupdate -y --no-pkg-mgr\n</code></pre>"},{"location":"Man%20Pages/tfm/","title":"Tfm","text":"<pre><code>% clamity tfm help\nUSAGE\n\n    clamity tfm { vars | smart-import | record-results } [-reconfigure] [tfm-options]\n    clamity tfm apply [--no-commit] [tfm-options]\n    clamity tfm common { report | update [mine] | new-root &lt;state-group&gt; &lt;module-name&gt; }\n    clamity tfm settings { show | [un]set aws-profile [profile] }\n    clamity tfm cicd complete [-reconfigure]\n    clamity tfm debug [ on | off ]  # (un)sets the 'TF_VAR_debug' env var\n    clamity tfm { terraform-cmd-and-args }\n\nABSTRACT\n\n    This facility provides extended features for managing terraform through\n    the CI/CD lifecycle, hopefully making repetative tasks and configurations\n    simpler to manage.\n\n    Use the 'clamity tfm' command as if it were an alias for the 'terraform'\n    command. It intercepts custom sub-commands (extensions), passing the rest\n    through to 'terraform' directly so 'clamity tfm state list' is identical\n    to 'terraform state list'. Some terraform commands are intercepted and\n    the command line passed to 'terraform' modified to accomodate global settings\n    for things like state management. For example, 'clamity tfm init' will add the\n    '-backend-config=xxx' arg for the appropriate config before passing through\n    to 'terraform init'.\n\n    To make these extensions useful, you must agree to manage your terraform root\n    modules in a particular way.\n\nTFM COMMANDS\n\n    apply - overload the TF apply sub-command to record results\n    cicd - CI/CD processing\n    common - verify &amp; sync tf code common to all root modules\n    init - overload the TF init sub-command to support access to the state\n    record-results - saves state to STATE.md and output to OUTPUT.json\n    settings - set properties for the repo\n    smart-import - Assist importing live resources into a root module's state\n    state-report - summarize resource deployments by state group\n    vars - display terraform environment variables\n\nCOMMAND OPTIONS\n\n    -reconfigure\n        Force -reconfigure with terraform init.\n\n    --no-commit\n        When running 'apply', don't commit and push changes to the repo.\n\nSUB-COMMANDS\n\n    cicd {complete}\n        An interface into various CI/CD pipeline processes. 'complete' will\n        execute a 'terraform plan' (and 'init' if need be) on all root modules\n        in sequence.\n\n    common\n        The 'common' subcommand syncs the code residing in the common/ directory\n        across all participating root modules. You can opt-in on a file-by-file\n        basis simply by keeping a copy of the file with the same name within\n        the root module directory. This mechanism solves the problem whereby\n        terraform code, at the outer-most level, requires specific attributes\n        and properties for the deployment, such as provider definitions which\n        often result in duplicated code.\n\n    record-results\n        Saves state listing to STATE.md and output to OUTPUT.json.\n\n    settings\n        You can set an aws_profile by state_group to use locally which when running\n        terraform commands. This is if you don't want to manage it with the\n        AWS_PROFILE env variable.\n\n    smart-import\n        System for reading resource data and importing it into state. This requires\n        customizations specific to each terraform root module and is typically\n        not used unless terraforming an existing installation.\n\n    state-report\n        List resource deployments (state list) by state group.\n\n    vars\n        Display variables associated with terraform (TF_*, TFM_*, CLAMITY_TFM_*).\n\nCOMMON OPTIONS\n\n    -d, --debug\n        Debug mode provides additional, lower-level output (CLAMITY_debug=1). Debug\n        messages are sent to stderr.\n\n    -n, --dryrun\n        Allows for execution of a script withot causing an underlying change to whatever\n        data the script affects. It is up to each script to determine what that means.\n        Some scripts do not support dryrun and will terminate immediately if it's enabled\n        (CLAMITY_dryrun=1).\n\n    -of, --output-format { json | text | csv }\n        Specifies format of output where applicable (CLAMITY_output_format). Defaults\n        to json.\n\n    -or, --output-redirection { none | log }\n        Sets up output redirection. 'none' leaves stdout and stderr untouched (this is\n        the default setting). 'log' captures both stdout and stderr to one log file and\n        sets CLAMITY_logfile to the full path and name of the logfile, using that value\n        if already set (CLAMITY_output_redirection=\"{none | log}\").\n\n    -q, --quiet\n        Suppress (or minimize) all reporting except warnings and errors (CLAMITY_quiet=1).\n\n    -v, --verbose\n        Enable extra reporting (CLAMITY_verbose=1). Includes printing the commands being\n        run under the hood to stdout.\n\n    -y, --yes\n        Disables interactive mode in which commands that prompt for confirmation before\n        doing things will automatically get answered with 'yes' (CLAMITY_yes=1).\n\nBOOLEAN EVALUATION\n\n    Boolean truthiness defines 'false' as an empty string or a case insensitive\n    match to anything matching to 'n|no|0|null|none|undefined|undef|f|false'.\n    Convention for setting booleans is to set them to a value of 1.\n\n    The 'lib/_.sh:_is_false()' shell function is the source of truth for\n    truthiness.\n\nSUPPORTED SHELLS\n\n    bash, zsh\n\nFILES\n    TFM_REPO_ROOT/.clamity/config/settings.sh\n        Configuration settings for the repo. This file should be committed.\n\n    TFM_REPO_ROOT/.clamity/config/module-sequence.sh\n        Script to provides the sequence in which root modules should be applied\n        allowing for intra-module dependencies. This should be executed from\n        within TFM_REPO_ROOT. This file should be committed.\n\n    TFM_REPO_ROOT/.clamity/config/state-resource-prefix.sh\n        Provides the resource prefix and region required for identifying backend\n        state resources when creating new root modules. This should be executed\n        from within TFM_REPO_ROOT. This file should be committed.\n\n    TFM_REPO_ROOT/.clamity/local/settings.sh\n        Configuration settings for the repo which should _not_ be committed.\n        Examples include your desired AWS_PROFILE values by state group.\n\nENVIRONMENT VARIABLES\n\n    TFM_REPO_ROOT\n        Full path to and including this repo's root.\n\n    TFM_POST_COMMIT\n        Controls execution of post-apply commit and push. Valid values are\n        'commit-only' (won't push), 'none' (won't commit or push), or null\n        (default) which will commit and push.\n\nEXAMPLES\n\n    List your root modules\n\n        A 'terraform.tf' file in a directory under $TFM_REPO_ROOT/roots/\n        designates a module root.\n\n        clamity tfm common\n\n    Initializing Pre-canned State Configurations\n\n        To facilitate custom strategies for managing backends and states,\n        a '.tfm.sh' file, in the root's directory, may be used to setup the\n        apporpriate parameters. It's a good habbit to initialize your state\n        using this tool. Add '-dryrun' if you want to see what it would do.\n\n        clamity tfm init\n</code></pre>"},{"location":"topics/data-packs/","title":"Data Packs","text":"<p>Clamity data packs are a means of providing contextual data associated with the platform or platform sub-component. As infrastructure resources are deployed in an aabstracted way, the details of the environment (things like account numbers, server endpoints, resource IDs, etc...) aren't readily available in static configurations. Clamity's solution for working with contexts like this is to identity a current data pack. A typical example could be a platform that defines a production and a development (non-production) set of resources in which services operate.  By installing production and development data packs, one could easily change context between them.</p> <p>There's only support for git repository data packs where installation of one is effectively cloning a repo and keeping it current is automatically handled by running git pulls when info is requested from it. Not overly efficient but good enough for now.</p> <p>Use the <code>clamity context data-pack</code> command for more.</p>"},{"location":"topics/shell-usage/","title":"Working in a Shell","text":"<p>The clamity CLI and other functions run within a shell environment. There's a myriad of ways to setup and use your shell environments. These observations and principals have served me well.</p>"},{"location":"topics/shell-usage/#you-should-know","title":"You should know...","text":"<ul> <li> <p>Your login shell is your parent environment under which everything you do   will operate. This includes applications run from launchpad on a mac or gnome   on a linux workstation, as well as the environment you get when you open a   terminal window.</p> </li> <li> <p>Your <code>~/.bash_profile</code> (<code>~/.zprofile</code>) and <code>~/.bashrc</code> (<code>~/.zshrc</code>) files are   used to setup your shell environment to your liking. The profile file is   executed by your host operating system's login sequence when you login whereas   the run-commands files (<code>~/.*rc</code>) are executed every time you launch a   shell.</p> </li> <li> <p>A good general rule is to set things in your profile intended to be   inherited by sub-shells and applications (for example, exported environment   variables) while settings not inherited (for example aliases or shell   functions) but which you always want available to you, would be placed in the   run-commands file.</p> </li> <li> <p>Here's the rub... the more you do to customize your login shell (mother of   all sub-shells) the more conflict you risk as the variety of things you do   increases. If you set <code>export MY_LICENSE_KEY=123</code> in your <code>~/.zprofile</code>, that   variable will be defined for every application you run and every sub-shell   you launch. Maybe that's what you want or maybe that's a problem. You must   decide for yourself.</p> </li> <li> <p>That said... good automation relies upon structure and completeness so   defining things at a global level (like in your login shell) tend to be   counter productive to ensuring consistency between individuals or in varying   contexts.</p> </li> <li> <p>One other good principal to live by is that mutating a shell for a different   purpose by removing things is generally difficult to do well and therefore not   an ideal pursuit. Consider shells ephemeral. Delete them when you're done with   whatever task you were doing and start the next task with a new shell.</p> </li> </ul>"},{"location":"topics/shell-usage/#my-recommendation-for-operators","title":"My recommendation for Operators","text":"<p>Operators tend to require maximum flexibility to accomodate the numerous contexts in which commands run. Keep your login shell as vanilla as possible while making modifying your shell's environment on-demand, simple.</p> <ul> <li> <p>Define <code>aliases</code> in your run-commands file to easily modify your   environment for specific tasks. For example, a <code>load-brew</code> alias could be used   to add homebrew to your search path or <code>load-clamity</code> can source the   clamity CLI into your shell.</p> </li> <li> <p>Even something as foundational as adding a package manager to your search path   might be something you want to do outside your login shell. For example, when   you install <code>macports</code> it will add it to your search path in your login shell.   Likewise, when you load <code>homebrew</code> it will define functions and variables in   your login shell. You may want the ability to switch package managers or   change the priority in your search path on a shell-by-shell (task-by-task)   basis. Or you may want a shell environment that doesn't include either.</p> </li> <li> <p>Keep your profile sparse, maybe even empty. Remember that any vars you   define and export here will be visible to everyhing you do.</p> </li> </ul> <p>Here's how I handle shell setup on my mac:</p> <pre><code>% cat ~/.zprofile\nexport HISTCONTROL=ignorespace\nexport SOME_TOKEN_I_WANT_SET_IN_ALL_SHELLS=\"token-value-goes-here\"\n\n\n% cat ~/.zshrc\n# Load Toolkits\nfunction __add_to_path { echo \"$PATH\" | grep -q \"$1\" || export PATH=\"$PATH:$1\"; }\n# load clamity\nalias load-clamity='source $HOME/src/clamity-toolbox/clamity/loader.sh'\n# use macports packages (priority)\nalias load-macports='echo \"$PATH\" | grep -q /opt/local/bin || export PATH=\"/opt/local/bin:/opt/local/sbin:$PATH\"'\n# use homebrew packages. Also the postgres and mysql command line utilities\nalias load-homebrew='eval \"$(/opt/homebrew/bin/brew shellenv)\"; __add_to_path /opt/homebrew/opt/libpq/bin; __add_to_path /opt/homebrew/opt/mysql-client/bin'\n# NVM node version manager\nalias load-nvm='source /opt/local/share/nvm/init-nvm.sh; __add_to_path ./node_modules/.bin'\n\n# Setup Development Environments\n# use macports packages. Also inclues nvm and clamity.\nalias load-dev-port='load-macports; load-nvm; load-clamity --quiet'\n# use homebrew packages. Also inclues nvm and clamity.\nalias load-dev-brew='load-homebrew; load-nvm; load-clamity --quiet'\n# Use homebrew packages first, then macports packages. Also inclues nvm and clamity.\nalias load-dev-1='load-homebrew; load-macports; load-nvm; load-clamity --quiet'\n\n# Uncomment _only one_ of these if you want that environment in place for all shells.\n# load-dev-1\n# load dev-brew\n</code></pre>"},{"location":"topics/shell-usage/#my-recommendation-for-developers","title":"My recommendation for Developers","text":"<p>Set things up like operators but call an alias in your <code>~/.*rc</code> file to load the environment you always work with (uncomment only one of the last <code>load-dev-*</code> lines above).</p>"}]}